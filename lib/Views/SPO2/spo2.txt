import 'dart:async';

import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/material.dart';

import 'package:intl/intl.dart';
import 'package:testfirebase/Views/pageConseil.dart';

class SecPage extends StatefulWidget {
  const SecPage({super.key, required this.lang});
  final String lang;

  @override
  State<SecPage> createState() => _SecPageState();
}

class _SecPageState extends State<SecPage> {
  StreamController<int?> _spo2StreamController = StreamController<int?>();
  Stream<int?> get spo2Stream => _spo2StreamController.stream;
  @override
  void initState() {
    super.initState();
    readData();
  }

  DatabaseReference dbRef = FirebaseDatabase.instance.ref('app');
  int? spo_2;
  // void readData() async {
  //   DataSnapshot snapshot = await dbRef.get();
  //   if (snapshot.exists) {
  //     setState(() {
  //       int? newFreq = event.snapshot.value as int?;
  //       _spo2StreamController.add(newFreq);
  //     });
  //   } else {
  //     print('No data available.');
  //   }
  // }
  void readData() {
    dbRef.child('spo2').onValue.listen((event) {
      if (event.snapshot.exists) {
        int? spo2 = event.snapshot.value as int?;
        _spo2StreamController.add(spo2);
      } else {
        print('No data available.');
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    var size, height, width;
    size = MediaQuery.of(context).size;
    height = size.height;
    width = size.width;

    return Scaffold(
      appBar: AppBar(title: Text(widget.lang)),
      // body: Container(
      //   decoration: BoxDecoration(
      //       gradient: LinearGradient(
      //           colors: [Colors.white, Colors.greenAccent],
      //           begin: Alignment.topCenter,
      //           end: Alignment.bottomCenter)),
      //   child: Center(
      //     child: Column(
      //       mainAxisAlignment: MainAxisAlignment.center,
      //       crossAxisAlignment: CrossAxisAlignment.center,
      //       children: [
      //         Row(
      //           mainAxisAlignment: MainAxisAlignment.center,
      //           crossAxisAlignment: CrossAxisAlignment.end,
      //           children: [
      //             Text(
      //               "${spo_2 ?? 'Loading...'} %",
      //               style: TextStyle(fontSize: 50),
      //             ),
      //           ],
      //         ),
      //         // Text(
      //         //   getRes(spo_2),
      //         //   style: TextStyle(fontSize: 50),
      //         // ),
      //         TextButton.icon(
      //             onPressed: () {
      //               _Modelsheet(context);
      //             },
      //             icon: Icon(Icons.forward),
      //             label: Text(getConseil()))
      //       ],
      //     ),
      //   ),
      // ),
      body: StreamBuilder<int?>(
        stream: spo2Stream,
        builder: (context, snapshot) {
          if (snapshot.hasData) {
            int? spo2 = snapshot.data;
            // Update the background color based on real-time data

            return Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [
                    Colors.white,
                    Colors.green.shade300
                  ], // Initial colors
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                ),
              ),
              child: Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    SizedBox(
                      height: 100,
                    ),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      crossAxisAlignment: CrossAxisAlignment.end,
                      children: [
                        Text(
                          '${spo2}',
                          style: TextStyle(fontSize: 50),
                        ),
                        Text(
                          "%",
                          style: TextStyle(fontSize: 20),
                        ),
                      ],
                    ),
                    // Text(
                    //   getRes(freq),
                    //   style: TextStyle(fontSize: 40),
                    // ),
                    TextButton.icon(
                      onPressed: () {
                        _Modelsheet(context);
                      },
                      icon: Icon(Icons.forward),
                      label: Text(getConseil()),
                    ),
                  ],
                ),
              ),
            );
          } else if (snapshot.hasError) {
            return Text('Error: ${snapshot.error}');
          } else {
            return Center(child: Text('Loading...'));
          }
        },
      ),
    );
  }

  void _Modelsheet(context) {
    showModalBottomSheet<void>(
      shape: RoundedRectangleBorder(
        //the rounded corner is created here
        borderRadius: BorderRadius.circular(10.0),
      ),
      context: context,
      builder: (BuildContext context) {
        //return MyCustomForm();

        return Container(
            height: 600, child: PageConseil(lang: widget.lang, spo2: spo_2!));
      },
    );
  }

  // Color changeColor(spo2) {
  //   if (spo2 <= 120) {
  //     return Colors.green.shade300;
  //   } else if (120 <= spo2 && spo2 <= 129) {
  //     return Colors.green;
  //   } else if (130 <= spo2 && spo2 <= 139) {
  //     return Colors.yellow.shade300;
  //   } else if (140 <= spo2 && spo2 <= 159) {
  //     return Colors.red.shade300;
  //   } else if (160 <= spo2 && spo2 <= 179) {
  //     return Colors.red;
  //   } else if (180 <= spo2) {
  //     return Colors.red.shade900;
  //   }
  //   return Colors.transparent;
  // }

  String getConseil() {
    switch (widget.lang) {
      case 'fr':
        return Intl.message('Conseil', name: 'clickMeText', locale: 'fr');
      case 'en':
        return Intl.message('Advise', name: 'clickMeText', locale: 'en');
      case 'ar':
        return Intl.message('نصيحة', name: 'clickMeText', locale: 'ar');
      default:
        return Intl.message('Conseil', name: 'clickMeText', locale: 'en');
    }
  }

  String getResult1() {
    switch (widget.lang) {
      case 'fr':
        return Intl.message('Optimale', name: 'clickMeText', locale: 'fr');
      case 'en':
        return Intl.message('Optimal', name: 'clickMeText', locale: 'en');
      case 'ar':
        return Intl.message('الأمثل', name: 'clickMeText', locale: 'ar');
      default:
        return Intl.message('Optimal', name: 'clickMeText', locale: 'en');
    }
  }

  String getResult2() {
    switch (widget.lang) {
      case 'fr':
        return Intl.message('Normale', name: 'clickMeText', locale: 'fr');
      case 'en':
        return Intl.message('Normal', name: 'clickMeText', locale: 'en');
      case 'ar':
        return Intl.message('طبيعي', name: 'clickMeText', locale: 'ar');
      default:
        return Intl.message('Normal', name: 'clickMeText', locale: 'en');
    }
  }

  String getResult3() {
    switch (widget.lang) {
      case 'fr':
        return Intl.message('Normale Haute', name: 'clickMeText', locale: 'fr');
      case 'en':
        return Intl.message('Haut Normal', name: 'clickMeText', locale: 'en');
      case 'ar':
        return Intl.message('ارتفاع طبيعي', name: 'clickMeText', locale: 'ar');
      default:
        return Intl.message('Normale Haute', name: 'clickMeText', locale: 'en');
    }
  }

  String getResult4() {
    switch (widget.lang) {
      case 'fr':
        return Intl.message('Hyperspo2 grade 1',
            name: 'clickMeText', locale: 'fr');
      case 'en':
        return Intl.message('Hyperspo2 grade 1',
            name: 'clickMeText', locale: 'en');
      case 'ar':
        return Intl.message('ارتفاع ضغط الدم الصنف 1',
            name: 'clickMeText', locale: 'ar');
      default:
        return Intl.message('Hyperspo2 grade 1',
            name: 'clickMeText', locale: 'en');
    }
  }

  String getResult5() {
    switch (widget.lang) {
      case 'fr':
        return Intl.message('Hyperspo2 grade 2',
            name: 'clickMeText', locale: 'fr');
      case 'en':
        return Intl.message('Hyperspo2 grade 2',
            name: 'clickMeText', locale: 'en');
      case 'ar':
        return Intl.message('ارتفاع ضغط الدم الصنف 2',
            name: 'clickMeText', locale: 'ar');
      default:
        return Intl.message('Hyperspo2 grade 2',
            name: 'clickMeText', locale: 'en');
    }
  }

  String getResult6() {
    switch (widget.lang) {
      case 'fr':
        return Intl.message('Hyperspo2 grade 3',
            name: 'clickMeText', locale: 'fr');
      case 'en':
        return Intl.message('Hyperspo2 grade 3',
            name: 'clickMeText', locale: 'en');
      case 'ar':
        return Intl.message('ارتفاع ضغط الدم الصنف 3',
            name: 'clickMeText', locale: 'ar');
      default:
        return Intl.message('Hyperspo2 grade 3',
            name: 'clickMeText', locale: 'en');
    }
  }

//   String getRes(spo2) {
//     if (spo2 <= 120) {
//       return getResult1();
//     } else if (120 <= spo2 && spo2 <= 129) {
//       return getResult2();
//     } else if (130 <= spo2 && spo2 <= 139) {
//       return getResult3();
//     } else if (140 <= spo2 && spo2 <= 159) {
//       return getResult4();
//     } else if (160 <= spo2 && spo2 <= 179) {
//       return getResult5();
//     } else if (180 <= spo2) {
//       return getResult6();
//     }
//     return getResult1();
//   }
}
